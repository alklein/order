
This appears to work!

Gm |- Pm :: x : A      Gl,x:A,Gr |- Pl | Pr :: z : C
----------------------------------------------------- cut
  Gl,Gm,Gr |- #x. Pl | Pm | Pr :: z : C

===========================================================================================================

can y be bound in Pl, and Pr but not Pm
and x be bound in Pl and Pm but not Pr in Pl | Pm | Pr ?  (yes) this is just hard to write linearly. 

 Gl', y : A |- Pr' :: x' : B                Gr' |- Pl :: y : A             Gl, x' : B , Gr |- Pl' | Pr :: z : C
-----------------------------------      -------------------------------------------------------------------------
Gl' |- x(y, x').Pr' :: x : A ->> B        Gl, x:A ->> B, Gr' , Gr |- (#x'. #y.(Pl | Pl' | x<y, x'>)) | Pr :: z : C
-------------------------------------------------------------------------------------------------------------------
       Gl,Gl',Gr',Gr |- #x.((#y.#x'.(Pl | Pl' | x<y, x'>)) | x(y,x').Pr' | Pr):: z : C


                                  Gl', y : A |- Pr' :: x' : B     Gl, x' : B , Gr |- Pl'' | Pl' | Pr :: z : C
                                 ----------------------------------------------------------------------
Gr' |- Pl :: y : A                            Gl,Gl',y:A,Gr |- #x'.(Pl' | Pr' | Pr) :: z : C
-----------------------------------------------------------------------------------------------
            Gl,Gl',Gr',Gr |-  #y.(Pl | #x'.(Pl' | Pr' | Pr)) :: z : C

Pl => Sl]Ol+Or[Sr
Pr => Sl']Ol'+Or'[Sr'
Pm => Pm'
#x. Pl | Pm | Pr => Sl] #x.Pm', (Sl']Ol'++Or[Sr),Ol++Or'[Sr'

 Gm |- T :: x : C     x : C |- 0] [x <-> x] [ 0 :: x : C
 --------------------------------------------------------
      Gm |- 0]#x.T, [x <-> x] [0 :: x : C
