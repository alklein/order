contextual process trees (transducer language)
C ::= #x.T, C | (y), C | * 
P ::= 0 | x.P | x<y>.P
T ::= P]C[P

Pl ] Ct,#x.T,Cb [ Pr
means x is bound in T, Cb Pl and Pr but not Ct

Pl ] Ct,(x),Cb [ Pr
means x is bound in Cb, Pl and Pr but not Ct, but we get it's value from either Pl or Pr

    Pl'] #x.(Pl] (y),O [x.Pr) , #y.Pm, O' [x<y>Pr'
==> Pl'] #x.(Pl] #y.Pm , O [Pr), O' [ Pr'  would happen first!
==> Pl'] #y.Pm , #x.(Pl] O [Pr), O' [ Pr'  stronger, since y is now bound in O', Pl' and Pr'.


Gm |- Pm :: x : A      Gl,x:A,Gr |- Pl]O[Pr :: z : C
----------------------------------------------------- cut
  Gl,Gm,Gr |- Pl]#x.Pm,O[Pr :: z : C


Wrong because things in Ol could bind things in Pm: 

Gm |- Pm :: x : A      Gl,x:A,Gr |- Pl]Ol,Or[Pr :: z : C
----------------------------------------------------------------- cut 
  Gl,Gm,Gr |- Pl]Ol, #x.Pm,Or[Pr :: z : C

===========================================================================================================

-------------------
* |- 0]*[0 :: z : 0


 Gl', y : A |- Pl]O[Pr :: x : B            Gr' |- Pm :: y : A             Gl, x : B , Gr |- Pl']O'[ Pr' :: z : C
-------------------------------------      ------------------------------------------------------------------------
Gl' |- Pl] (y),O [x.Pr :: x : A ->> B           Gl, x:A ->> B, Gr' , Gr |- Pl'] #y.Pm,O' [x<y>.Pr' :: z : C
--------------------------------------------------------------------------------------------------------------
       Gl,Gl',Gr',Gr |-  Pl'] #x.(Pl] (y),O [x.Pr) , #y.Pm, O' [x<y>Pr'  :: z : C

----->

                         Gl', y : A |- Pl] O [Pr :: x : B    Gl, x : B , Gr |- Pl']O'[ Pr' :: z : C
                        ----------------------------------------------------------------------------
Gr' |- Pm :: y : A          Gl, Gl', y : A, Gr |- Pl'] #x.(Pl] O [Pr), O' [ Pr' :: z : C
------------------------------------------------------------------------------------------
    Gl,Gl',Gr',Gr |-  Pl'] #y.Pm , #x.(Pl] O [Pr), O' [ Pr' :: z : C

or

Gr' |- Pm :: y : A      Gl', y : A |- Pl] O [Pr :: x : B    
---------------------------------------------------------
     Gl', Gr' |- Pl] #y.Pm, O [Pr :: x : B                Gl, x : B , Gr |- Pl']O'[ Pr' :: z : C 
--------------------------------------------------------------------------------------------------
  Gl,Gl',Gr',Gr |- Pl' ] #x.(Pl] #y.Pm, O [Pr), O' [ Pr' :: z : C


this depends on whether Pm has an x or O'/Pl'/Pr' has a y! 
to make it not depend on this fact: 
    Pl'] #x,(Pl] (y),O [x.Pr) , #y,Pm, O' [x<y>Pr'
==> Pl'] #x,#y,Pm,(Pl] O [Pr), O' [ Pr'


Gm |- Pm :: x : A      Gl,x:A,Gr |- Pl]Ol,Or[Pr :: z : C
----------------------------------------------------------------- cut 
  Gl,Gm,Gr |- Pl]Ol, #x.Pm,Or[Pr :: z : C

===========================================================================================================


 Gl', y : A |- Pl]O[Pr :: x : B            Gr' |- Pm :: y : A             Gl, x : B , Gr |- Pl']Ol,Or[ Pr' :: z : C
-------------------------------------      ------------------------------------------------------------------------
Gl' |- Pl](y),O [x.Pr :: x : A ->> B           Gl, x:A ->> B, Gr' , Gr |- Pl'] Ol,#y,Pm,Or [x<y>.Pr' :: z : C
--------------------------------------------------------------------------------------------------------------
       Gl,Gl',Gr',Gr |-  Pl'] Ol,#x,(Pl] (y),O [x.Pr) , #y,Pm, Or [x<y>Pr'  :: z : C

----->

                         Gl', y : A |- Pl] O [Pr :: x : B    Gl, x : B , Gr |- Pl']Ol,Or[ Pr' :: z : C
                        ----------------------------------------------------------------------------
Gr' |- Pm :: y : A          Gl, Gl', y : A, Gr |- Pl'] Ol,#x,(Pl] O [Pr), Or [ Pr' :: z : C
------------------------------------------------------------------------------------------
    Gl,Gl',Gr',Gr |-  Pl'] Ol,#x,#y,Pm,(Pl] O [Pr), O' [ Pr' :: z : C



 Gl', y : A |- Pl]O[Pr :: x : B            Gr' |- Pm :: y : A             Gl, x : B , Gr |- Pl']Ol,Or[ Pr' :: z : C
-------------------------------------      ------------------------------------------------------------------------
Gl' |- Pl] (y),O [x.Pr :: x : A ->> B           Gl, x:A ->> B, Gr' , Gr |- Pl'] Ol,#y,Pm,Or [x<y>.Pr' :: z : C
--------------------------------------------------------------------------------------------------------------
       Gl,Gl',Gr',Gr |-  Pl'] Ol,#y,Pm,#x,(Pl] (y),O [x.Pr) , Or [x<y>Pr'  :: z : C

----->

                         Gl', y : A |- Pl] O [Pr :: x : B    Gl, x : B , Gr |- Pl']Ol,Or[ Pr' :: z : C
                        ----------------------------------------------------------------------------
Gr' |- Pm :: y : A          Gl, Gl', y : A, Gr |- Pl'] Ol,#x,(Pl] O [Pr), Or [ Pr' :: z : C
------------------------------------------------------------------------------------------
    Gl,Gl',Gr',Gr |-  Pl'] Ol,#y,Pm,#x,(Pl] O [Pr), O' [ Pr' :: z : C
