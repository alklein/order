contextual process trees (transducer language)
C ::= #x.T, C | (y), C | * 
P ::= 0 | x.P | x<y>.P
T ::= P]C[P

Pl ] Ct,#x.T,Cb [ Pr
means x is bound in T, Cb Pl and Pr but not Ct

Pl ] Ct,(x),Cb [ Pr
means x is bound in Cb, Pl and Pr but not Ct, but we get it's value from either Pl or Pr

    Pl'] #x.(Pl] (y),O [x.Pr) , #y.Pm, O' [x<y>Pr'
==> Pl'] #x.(Pl] #y.Pm , O [Pr), O' [ Pr'  would happen first!
==> Pl'] #y.Pm , #x.(Pl] O [Pr), O' [ Pr'  stronger, since y is now bound in O', Pl' and Pr'.


Gm |- Pm :: x : A      Gl,x:A,Gr |- Pl]O[Pr :: z : C
----------------------------------------------------- cut
  Gl,Gm,Gr |- Pl]#x.Pm,O[Pr :: z : C


Wrong because things in Ol could bind things in Pm: 

Gm |- Pm :: x : A      Gl,x:A,Gr |- Pl]Ol,Or[Pr :: z : C
----------------------------------------------------------------- cut 
  Gl,Gm,Gr |- Pl]Ol, #x.Pm,Or[Pr :: z : C

===========================================================================================================

-------------------
* |- 0]*[0 :: z : 0


 Gl', y : A |- Pl]O[Pr :: x : B            Gr' |- Pm :: y : A             Gl, x : B , Gr |- Pl']O'[ Pr' :: z : C
-------------------------------------      ------------------------------------------------------------------------
Gl' |- Pl] (y),O [x.Pr :: x : A ->> B           Gl, x:A ->> B, Gr' , Gr |- Pl'] #y.Pm,O' [x<y>.Pr' :: z : C
--------------------------------------------------------------------------------------------------------------
       Gl,Gl',Gr',Gr |-  Pl'] #x.(Pl] (y),O [x.Pr) , #y.Pm, O' [x<y>Pr'  :: z : C

----->

                         Gl', y : A |- Pl] O [Pr :: x : B    Gl, x : B , Gr |- Pl']O'[ Pr' :: z : C
                        ----------------------------------------------------------------------------
Gr' |- Pm :: y : A          Gl, Gl', y : A, Gr |- Pl'] #x.(Pl] O [Pr), O' [ Pr' :: z : C
------------------------------------------------------------------------------------------
    Gl,Gl',Gr',Gr |-  Pl'] #y.Pm , #x.(Pl] O [Pr), O' [ Pr' :: z : C

or

Gr' |- Pm :: y : A      Gl', y : A |- Pl] O [Pr :: x : B    
---------------------------------------------------------
     Gl', Gr' |- Pl] #y.Pm, O [Pr :: x : B                Gl, x : B , Gr |- Pl']O'[ Pr' :: z : C 
--------------------------------------------------------------------------------------------------
  Gl,Gl',Gr',Gr |- Pl' ] #x.(Pl] #y.Pm, O [Pr), O' [ Pr' :: z : C


these are all members of the following transformation family.
     Pl'] Ol,#y.Tm, #x.(Pl] (y),O [x.Pr) , Or [x<y>Pr'  
===> Pl'] Ol,#y.Tm,#x.(Pl] O [Pr), O' [ Pr' 

even though these transformations aren't general enough to apply always, they can be derived in the cases where
the expression is well typed.  

Doesn't this mean there is no cut reduction theorem with transformation semantics? No 
- if we have a cut form that matches one of the other cases, we can reduce it using the move-new rule.


